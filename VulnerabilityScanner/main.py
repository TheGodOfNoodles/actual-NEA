from __future__ import annotations

import threading
from typing import List
from urllib.parse import urlparse

import customtkinter as ctk

from scanner_engine import run_full_scan, Vulnerability


ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("dark-blue")


class VulnerabilityScannerApp(ctk.CTk):
    """CustomTkinter application shell for the NEA Web Vulnerability Scanner."""

    def __init__(self) -> None:
        super().__init__()

        self.title("NEA Web Vulnerability Scanner")
        self.geometry("800x600")
        self.minsize(800, 600)

        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=1)

        self._is_scanning = False
        self._latest_results: List[Vulnerability] = []
        self._progress_is_determinate = False
        self._default_entry_border_color = None
        self._help_window: ctk.CTkToplevel | None = None

        self._build_top_frame()
        self._build_middle_frame()
        self._build_results_frame()
        self._build_footer_frame()

    # --------------------------------------------------------------------- UI
    def _build_top_frame(self) -> None:
        top_frame = ctk.CTkFrame(self)
        top_frame.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="ew")
        top_frame.grid_columnconfigure(0, weight=1)
        top_frame.grid_columnconfigure(1, weight=0)

        self.url_entry = ctk.CTkEntry(
            top_frame,
            placeholder_text="Enter your target URL (e.g., https://www.example.com)",
            height=36,
        )
        self.url_entry.grid(row=0, column=0, padx=(10, 5), pady=10, sticky="ew")
        self._default_entry_border_color = self.url_entry.cget("border_color")
        self.url_entry.bind("<KeyRelease>", self._reset_entry_border)

        self.scan_button = ctk.CTkButton(
            top_frame,
            text="Start Scan",
            height=36,
            command=self._on_start_scan,
        )
        self.scan_button.grid(row=0, column=1, padx=(5, 10), pady=10)

    def _build_middle_frame(self) -> None:
        middle_frame = ctk.CTkFrame(self)
        middle_frame.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
        middle_frame.grid_columnconfigure(0, weight=1)

        self.status_label = ctk.CTkLabel(
            middle_frame,
            text="Ready",
            anchor="w",
            font=ctk.CTkFont(size=14, weight="normal"),
        )
        self.status_label.grid(row=0, column=0, padx=12, pady=(12, 6), sticky="ew")

        self.progress_bar = ctk.CTkProgressBar(middle_frame, height=16)
        self.progress_bar.grid(row=1, column=0, padx=12, pady=(0, 12), sticky="ew")
        self.progress_bar.set(0.0)

    def _build_results_frame(self) -> None:
        results_container = ctk.CTkFrame(self)
        results_container.grid(row=2, column=0, padx=20, pady=10, sticky="nsew")
        results_container.grid_rowconfigure(0, weight=1)
        results_container.grid_columnconfigure(0, weight=1)

        header = ctk.CTkLabel(
            results_container,
            text="Scan Findings",
            anchor="w",
            font=ctk.CTkFont(size=16, weight="bold"),
        )
        header.grid(row=0, column=0, padx=12, pady=(12, 4), sticky="ew")

        self.results_frame = ctk.CTkScrollableFrame(results_container)
        self.results_frame.grid(row=1, column=0, padx=12, pady=(0, 12), sticky="nsew")
        self.results_frame.grid_columnconfigure(0, weight=1)

    def _build_footer_frame(self) -> None:
        footer_frame = ctk.CTkFrame(self)
        footer_frame.grid(row=3, column=0, padx=20, pady=(0, 20), sticky="ew")
        footer_frame.grid_columnconfigure(0, weight=1)
        footer_frame.grid_columnconfigure(1, weight=0)

        self.export_button = ctk.CTkButton(
            footer_frame,
            text="Export Report",
            state="disabled",
            command=self._export_report,
        )
        self.export_button.grid(row=0, column=0, padx=12, pady=12, sticky="w")

        self.help_button = ctk.CTkButton(
            footer_frame,
            text="Help",
            width=60,
            command=self._open_help_window,
        )
        self.help_button.grid(row=0, column=1, padx=12, pady=12, sticky="e")

    # ------------------------------------------------------------- Event logic
    def _on_start_scan(self) -> None:
        if self._is_scanning:
            return

        url = self.url_entry.get().strip()
        if not self._is_valid_url(url):
            self._highlight_entry_error()
            self._update_status("Please enter a valid URL (include http:// or https://).")
            return

        self._prepare_for_scan()
        worker = threading.Thread(target=self._scan_worker, args=(url,), daemon=True)
        worker.start()

    def _scan_worker(self, target_url: str) -> None:
        try:
            findings = run_full_scan(
                target_url=target_url,
                depth=2,
                progress_callback=self._thread_safe_progress,
                status_callback=self._thread_safe_status,
            )
        except Exception as exc:  # pragma: no cover - defensive
            self._thread_safe_status("Scan failed. Please try again.")
            self.after(0, self._finalize_scan)
            return

        self.after(0, lambda: self._handle_scan_complete(findings))

    # --------------------------------------------------------------- Callbacks
    def _thread_safe_progress(self, value: float) -> None:
        self.after(0, lambda: self._update_progress(value))

    def _thread_safe_status(self, message: str) -> None:
        self.after(0, lambda: self._update_status(message))

    # --------------------------------------------------------- UI manipulation
    def _prepare_for_scan(self) -> None:
        self._is_scanning = True
        self._latest_results.clear()
        self.scan_button.configure(state="disabled")
        self.export_button.configure(state="disabled")
        self._clear_results()
        self._update_status("Starting scan...")
        self._set_progress_indeterminate()

    def _handle_scan_complete(self, findings: List[Vulnerability]) -> None:
        self._latest_results = findings
        self._update_progress(1.0)
        self.progress_bar.stop()
        self._progress_is_determinate = True

        if findings:
            self._populate_results(findings)
            self.export_button.configure(state="normal")
        else:
            self._update_status("Scan complete! No issues found.")

        self._finalize_scan()

    def _finalize_scan(self) -> None:
        self._is_scanning = False
        self.scan_button.configure(state="normal")

    def _set_progress_indeterminate(self) -> None:
        self.progress_bar.stop()
        self.progress_bar.configure(mode="indeterminate")
        self.progress_bar.start()
        self._progress_is_determinate = False

    def _update_progress(self, value: float) -> None:
        clamped = max(0.0, min(1.0, float(value)))
        if not self._progress_is_determinate:
            self.progress_bar.stop()
            self.progress_bar.configure(mode="determinate")
            self._progress_is_determinate = True
        self.progress_bar.set(clamped)

    def _update_status(self, message: str) -> None:
        self.status_label.configure(text=message)

    def _clear_results(self) -> None:
        for widget in self.results_frame.winfo_children():
            widget.destroy()

    def _populate_results(self, findings: List[Vulnerability]) -> None:
        severity_colors = {
            "High": "#ff4c4c",
            "Medium": "#ffb347",
            "Low": "#ffe066",
        }

        for index, finding in enumerate(findings):
            card = ctk.CTkFrame(self.results_frame)
            card.grid(
                row=index,
                column=0,
                padx=10,
                pady=(0, 12),
                sticky="ew",
            )
            card.grid_columnconfigure(0, weight=1)

            title = f"{finding.get('severity', 'Unknown')}: {finding.get('type', 'Finding')}"
            title_label = ctk.CTkLabel(
                card,
                text=title,
                font=ctk.CTkFont(size=15, weight="bold"),
                text_color=severity_colors.get(finding.get("severity", ""), "#ffffff"),
                anchor="w",
            )
            title_label.grid(row=0, column=0, padx=12, pady=(12, 6), sticky="ew")

            location_label = ctk.CTkLabel(
                card,
                text=f"Location: {finding.get('url', 'Unknown')}",
                anchor="w",
                wraplength=600,
            )
            location_label.grid(row=1, column=0, padx=12, pady=2, sticky="ew")

            description_label = ctk.CTkLabel(
                card,
                text=f"Description: {finding.get('description', 'No description available.')}",
                anchor="w",
                wraplength=600,
            )
            description_label.grid(row=2, column=0, padx=12, pady=2, sticky="ew")

            recommendation_label = ctk.CTkLabel(
                card,
                text=(
                    "Recommendation: "
                    f"{finding.get('recommendation', 'Seek guidance from a web professional.')}"
                ),
                anchor="w",
                wraplength=600,
            )
            recommendation_label.grid(row=3, column=0, padx=12, pady=(2, 12), sticky="ew")

    # --------------------------------------------------------------- Utilities
    @staticmethod
    def _is_valid_url(url: str) -> bool:
        parsed = urlparse(url)
        return parsed.scheme in {"http", "https"} and bool(parsed.netloc)

    def _highlight_entry_error(self) -> None:
        self.url_entry.configure(border_color="#ff4c4c")

    def _reset_entry_border(self, _event=None) -> None:
        if self._default_entry_border_color is not None:
            self.url_entry.configure(border_color=self._default_entry_border_color)

    def _export_report(self) -> None:
        if not self._latest_results:
            return

        file_path = ctk.filedialog.asksaveasfilename(
            title="Save vulnerability report",
            defaultextension=".txt",
            filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")],
        )
        if not file_path:
            return

        report_lines = ["NEA Web Vulnerability Scanner Report", "=" * 40, ""]
        for finding in self._latest_results:
            report_lines.extend(
                [
                    f"Type: {finding.get('type', 'Unknown')}",
                    f"Severity: {finding.get('severity', 'Unknown')}",
                    f"Location: {finding.get('url', 'Unknown')}",
                    f"Description: {finding.get('description', 'N/A')}",
                    f"Recommendation: {finding.get('recommendation', 'N/A')}",
                    "",
                ]
            )

        with open(file_path, "w", encoding="utf-8") as report_file:
            report_file.write("\n".join(report_lines))

        self._update_status(f"Report saved to {file_path}")

    def _open_help_window(self) -> None:
        if self._help_window is not None and self._help_window.winfo_exists():
            self._help_window.focus_set()
            return

        help_window = ctk.CTkToplevel(self)
        help_window.title("About the Scanner")
        help_window.geometry("420x320")
        help_window.resizable(False, False)

        text = (
            "Ethical Use Only\n"
            "-----------------\n"
            "This tool is designed for educational purposes and for assessing "
            "websites that you own or have explicit permission to test.\n\n"
            "About the Scanner\n"
            "-----------------\n"
            "The NEA Web Vulnerability Scanner performs a basic crawl, looks "
            "for common issues like reflected XSS or SQL injection, and checks "
            "for a few key security headers. The results are simplified to help "
            "you decide when to seek professional guidance."
        )

        label = ctk.CTkLabel(
            help_window,
            text=text,
            justify="left",
            anchor="nw",
            wraplength=380,
        )
        label.pack(padx=20, pady=20, fill="both", expand=True)

        self._help_window = help_window


def main() -> None:
    app = VulnerabilityScannerApp()
    app.mainloop()


if __name__ == "__main__":
    main()
